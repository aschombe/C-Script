// Tokens
Integer = @{ ASCII_DIGIT+ }
Float = @{ Integer ~ ("." ~ ASCII_DIGIT*)? }
String = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
Bool = { "true" | "false" }
ident = @{ ASCII_ALPHA ~ (ASCII_ALPHA | ASCII_DIGIT)* }
type = { "int" | "Float" | "string" | "bool" }

bin_ops = { add | sub | mul | div | modulus | pow | and | or | eq | neq | gt | lt | gte | lte }
add     =  { "+" }
sub     =  { "-" }
mul     =  { "*" }
div     =  { "/" }
modulus =  { "%" }
pow     =  { "^" }
and     =  { "&&" }
or      =  { "||" }
eq      =  { "==" }
neq     =  { "!=" }
gt      =  { ">" }
gte     =  { ">=" }
lte     =  { "<=" }
lt      =  { "<" }

un_ops = { neg | not }
neg = { "-" }
not = { "!" }

assignment = { eq_assign | add_eq | sub_eq | mul_eq | div_eq | mod_eq | pow_eq }
eq_assign = { "=" }
add_eq = { "+=" }
sub_eq = { "-=" }
mul_eq = { "*=" }
div_eq = { "/=" }
mod_eq = { "%=" }
pow_eq = { "^=" }

// Statements
let_stmt = { "let" ~ ident ~ ":" ~ type ~ "=" ~ expr ~ ";" }
set_stmt = { ident ~ "=" ~ expr ~ ";" }
del_stmt = { "del" ~ ident ~ ";" }
var_ref = { ident }

// Literals
int = @{ Integer }
float = @{ Float }
string = @{ String }
bool = @{ Bool }

// Expressions
expr = _{ bin_expr | un_expr | int | float | string | bool | var_ref | func_call }
bin_expr = _{ or_expr }
un_expr = _{ un_ops ~ expr }
or_expr = _{ and_expr ~ (or ~ and_expr)* }
and_expr = _{ equality_expr ~ (and ~ equality_expr)* }
equality_expr = _{ comparison_expr ~ (eq | neq ~ comparison_expr)* }
comparison_expr = _{ additive_expr ~ (lt | lte | gt | gte ~ additive_expr)* }
additive_expr = _{ multiplicative_expr ~ (add | sub ~ multiplicative_expr)* }
multiplicative_expr = _{ power_expr ~ (mul | div | modulus ~ power_expr)* }
power_expr = _{ unary_expr ~ (pow ~ unary_expr)* }
unary_expr = _{ (not | neg)* ~ primary_expr }
primary_expr = _{ int | float | string | bool | var_ref | func_call | "(" ~ expr ~ ")" }

// Control Flow
iee = { "if" ~ "(" ~ expr ~ ")" ~ "{" ~ stmt* ~ "}" ~ elif* ~ else_? }
elif = { "elif" ~ "(" ~ expr ~ ")" ~ "{" ~ stmt* ~ "}" }
else_ = { "else" ~ "{" ~ stmt* ~ "}" }

switch = { "switch" ~ "(" ~ expr ~ ")" ~ "{" ~ case* ~ default? ~ "}" }
case = { "case" ~ expr ~ ":" ~ "{" ~ stmt* ~ "}" }
default = { "default" ~ ":" ~ "{" ~ stmt* ~ "}" }

// Loops
for_loop = { "for" ~ "(" ~ stmt ~ ";" ~ expr ~ ";" ~ stmt ~ ")" ~ "{" ~ stmt* ~ "}" }
while_loop = { "while" ~ "(" ~ expr ~ ")" ~ "{" ~ stmt* ~ "}" }
continue_stmt = { "continue" ~ ";" }
break_stmt = { "break" ~ ";" }

// Functions
func_def = { "fn" ~ ident ~ "(" ~ params ~ ")" ~ ":" ~ type ~ "{" ~ stmt* ~ "}" }
params = { (ident ~ ":" ~ type) ~ ("," ~ ident ~ ":" ~ type)* }
func_call = { ident ~ "(" ~ exprs ~ ")" }
exprs = { expr ~ ("," ~ expr)* }
return_stmt = { "return" ~ expr ~ ";" }

// Statements
stmt = _{"\n"* ~ (let_stmt | set_stmt | del_stmt | expr | iee | switch | for_loop | while_loop | continue_stmt | break_stmt | func_def | func_call | return_stmt) }
program = _{ stmt* }

// Whitespace
WHITESPACE = _{ " " | "\n" | "\t" | ("//" ~ (!"\n" ~ ANY)*) | ("/*" ~ (!"*/" ~ ANY)* ~ "*/") }
