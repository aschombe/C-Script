use crate::ast::ASTNodeTypes;

#[derive(Debug, Clone)]
pub enum Keywords {
    Add,
    Sub,
    Mul,
    Div,
    Mod,
    And,
    Or,
    Concat,
    Neg,
    Sqrt,
    Sin,
    Cos,
    Tan,
    Abs,
    Floor,
    Ceil,
    Not,
    Len,
    Upper,
    Lower,
    Exit,
    Pow,
    Rand,
    Eq,
    Neq,
    Gt,
    Lt,
    Gte,
    Lte,
    Let,
    Del,
    If,
    Elif,
    Else,
    Switch,
    Case,
    Default,
    For,
    While,
    Function,
    Return,
    Break,
    Continue,
    Substring,
    Strip,
    Replace,
    Print,
    Int,
    Float,
    String,
    Bool,
    Void,
}

// match each keyword to an AST node
pub fn get_ast_node(keyword: &str) -> ASTNodeTypes {
    match keyword {
        "+" => ASTNodeTypes::NArg,
        "-" => ASTNodeTypes::NArg,
        "*" => ASTNodeTypes::NArg,
        "/" => ASTNodeTypes::NArg,
        "%" => ASTNodeTypes::NArg,
        "&&" => ASTNodeTypes::NArg,
        "||" => ASTNodeTypes::NArg,
        "<>" => ASTNodeTypes::NArg,
        "~" => ASTNodeTypes::OneArg,
        "sqrt" => ASTNodeTypes::OneArg,
        "sin" => ASTNodeTypes::OneArg,
        "cos" => ASTNodeTypes::OneArg,
        "tan" => ASTNodeTypes::OneArg,
        "abs" => ASTNodeTypes::OneArg,
        "floor" => ASTNodeTypes::OneArg,
        "ceil" => ASTNodeTypes::OneArg,
        "!" => ASTNodeTypes::OneArg,
        "len" => ASTNodeTypes::OneArg,
        "upper" => ASTNodeTypes::OneArg,
        "lower" => ASTNodeTypes::OneArg,
        "exit" => ASTNodeTypes::OneArg,
        "^" => ASTNodeTypes::TwoArg,
        "rand" => ASTNodeTypes::TwoArg,
        "==" => ASTNodeTypes::TwoArgComp,
        "!=" => ASTNodeTypes::TwoArgComp,
        ">" => ASTNodeTypes::TwoArgComp,
        "<" => ASTNodeTypes::TwoArgComp,
        ">=" => ASTNodeTypes::TwoArgComp,
        "<=" => ASTNodeTypes::TwoArgComp,
        "let" => ASTNodeTypes::Let,
        "del" => ASTNodeTypes::Del,
        "if" => ASTNodeTypes::IfElifElse,
        "elif" => ASTNodeTypes::IfElifElse,
        "else" => ASTNodeTypes::IfElifElse,
        "switch" => ASTNodeTypes::Switch,
        "case" => ASTNodeTypes::Case,
        "default" => ASTNodeTypes::Default,
        "for" => ASTNodeTypes::For,
        "while" => ASTNodeTypes::While,
        "func" => ASTNodeTypes::Function,
        "return" => ASTNodeTypes::Return,
        "break" => ASTNodeTypes::Break,
        "continue" => ASTNodeTypes::Continue,
        "substring" => ASTNodeTypes::Substring,
        "strip" => ASTNodeTypes::Strip,
        "replace" => ASTNodeTypes::Replace,
        "print" => ASTNodeTypes::Print,
        "int" => ASTNodeTypes::Value,
        "float" => ASTNodeTypes::Value,
        "string" => ASTNodeTypes::Value,
        "bool" => ASTNodeTypes::Value,
        "void" => ASTNodeTypes::Value,
        _ => ASTNodeTypes::FunctionCall,
    }
}

pub fn get_keyword(keyword: &str) -> Keywords {
    match keyword {
        "+" => Keywords::Add,
        "-" => Keywords::Sub,
        "*" => Keywords::Mul,
        "/" => Keywords::Div,
        "%" => Keywords::Mod,
        "&&" => Keywords::And,
        "||" => Keywords::Or,
        "<>" => Keywords::Concat,
        "~" => Keywords::Neg,
        "sqrt" => Keywords::Sqrt,
        "sin" => Keywords::Sin,
        "cos" => Keywords::Cos,
        "tan" => Keywords::Tan,
        "abs" => Keywords::Abs,
        "floor" => Keywords::Floor,
        "ceil" => Keywords::Ceil,
        "!" => Keywords::Not,
        "len" => Keywords::Len,
        "upper" => Keywords::Upper,
        "lower" => Keywords::Lower,
        "exit" => Keywords::Exit,
        "^" => Keywords::Pow,
        "rand" => Keywords::Rand,
        "==" => Keywords::Eq,
        "!=" => Keywords::Neq,
        ">" => Keywords::Gt,
        "<" => Keywords::Lt,
        ">=" => Keywords::Gte,
        "<=" => Keywords::Lte,
        "let" => Keywords::Let,
        "del" => Keywords::Del,
        "if" => Keywords::If,
        "elif" => Keywords::Elif,
        "else" => Keywords::Else,
        "switch" => Keywords::Switch,
        "case" => Keywords::Case,
        "default" => Keywords::Default,
        "for" => Keywords::For,
        "while" => Keywords::While,
        "func" => Keywords::Function,
        "return" => Keywords::Return,
        "break" => Keywords::Break,
        "continue" => Keywords::Continue,
        "substring" => Keywords::Substring,
        "strip" => Keywords::Strip,
        "replace" => Keywords::Replace,
        "print" => Keywords::Print,
        "int" => Keywords::Int,
        "float" => Keywords::Float,
        "string" => Keywords::String,
        "bool" => Keywords::Bool,
        "void" => Keywords::Void,
        _ => panic!("Unknown keyword: {}", keyword),
    }
}
